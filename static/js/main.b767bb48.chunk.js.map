{"version":3,"sources":["geolocator.js","boxResults.js","images/icon-location.svg","map.js","App.js","index.js"],"names":["getIpInfo","ipAddress","a","requestUrl","fetch","then","res","json","data","ip","location","isp","ipAddr","city","timezone","lat","lng","catch","err","console","log","alert","IPInfo","props","ipInfo","id","class","L","Icon","Default","imagePath","DisplayMap","coordinates","icon","iconUrl","markerIcon","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","className","latLng","position","MapContainer","style","height","width","center","zoom","zoomControl","scrollWheelZoom","TileLayer","attribution","url","Marker","App","useState","setUserPayload","isLoggedIn","setIsLoggedIn","setIpInfo","useEffect","getIpOrDomainInfo","sawoConfig","containerID","identifierType","apiKey","onSuccess","onSuccessLogin","Sawo","showForm","payload","formik","useFormik","initialValues","text","onSubmit","values","Fragment","handleSubmit","type","name","placeholder","onChange","handleChange","value","margin","marginTop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b767bb48.chunk.js","sourcesContent":["export const getIpInfo = async (ipAddress) => {\n    let apiKey = \"at_fZztXVbhjXjxMrwenAYloTm3Z3Iph\"\n    let requestUrl = `https://geo.ipify.org/api/v1?apiKey=${apiKey}&ipAddress=${ipAddress}`;\n    const data = await fetch(requestUrl)\n        .then((res) => res.json())\n        .then((data) => {\n            const { ip, location, isp } = data;\n            return {\n            ipAddr: ip,\n            location: location.city,\n            timezone: location.timezone,\n            isp: isp,\n            lat: location.lat,\n            lng: location.lng,\n            };\n        }).catch((err)=>{\n            console.log('Error has occured' + err)\n            alert(\"No location data available\")\n        });\n        return (data);\n    };\n\n    ","\nfunction IPInfo(props){\n    const { ipAddr, location, timezone, isp } = props.ipInfo;\n    return(\n      <div id=\"boxResults\">    \n      <div class=\"resultBox\" id=\"borderRight\"><p>IP Address</p><h2>{ipAddr}</h2></div>\n      <div class=\"resultBox\" id=\"borderRight\"><p>Location</p><h2>{location ? location : \"N/A\"}</h2></div>\n      <div class=\"resultBox\" id=\"borderRight\"><p>Timezone</p><h2>{timezone}</h2></div>\n      <div class=\"resultBox\"><p>ISP</p><h2>{isp}</h2></div>\n      </div>\n    )\n  }\n\nexport default IPInfo","export default __webpack_public_path__ + \"static/media/icon-location.7e6459d2.svg\";","import React from \"react\";\nimport \"./App.css\";\nimport { MapContainer, TileLayer, Marker } from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport L from \"leaflet\";\nimport markerIcon from \"./images/icon-location.svg\";\nL.Icon.Default.imagePath = \"/\";\n\nfunction DisplayMap({ coordinates }) {\n    const icon = L.icon({\n        iconUrl: markerIcon,\n        iconRetinaUrl: markerIcon,\n        iconAnchor: null,\n        popupAnchor: null,\n        shadowUrl: null,\n        shadowSize: null,\n        shadowAnchor: null,\n        iconSize: [40, 50],\n        className: \"mapcontainer_icon\",\n    });\n    const latLng = L.latLng(coordinates.lat, coordinates.lng);\n    const position = [51.505, -0.09]\n    if(latLng){\n  return (\n    <div className=\"mapcontainer\">\n        <MapContainer \n        style={{ height: \"600px\", width: \"100%\" }} \n        center={latLng} zoom={10} \n        zoomControl ={false}\n        scrollWheelZoom={true}>\n        <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker icon={icon} position={latLng}>\n        </Marker>\n        </MapContainer>\n    </div>\n  );\n}else{\n  return (\n    <div className=\"mapcontainer\">\n        <MapContainer \n        style={{ height: \"600px\", width: \"100%\" }} \n        center={position} zoom={10} \n        zoomControl ={false}\n        scrollWheelZoom={true}>\n        <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker icon={icon} position={position}>\n        </Marker>\n        </MapContainer>\n    </div>\n  );\n}\n}\nexport default DisplayMap;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Sawo from \"sawo\";\nimport 'leaflet/dist/leaflet.css';\nimport L from \"leaflet\";\nimport { useFormik } from 'formik';\nimport   { getIpInfo as getIpOrDomainInfo } from './geolocator';\nimport IPInfo from './boxResults';\nimport DisplayMap from './map.js'\nL.Icon.Default.imagePath = \"/\";\n\nfunction App() {\n  // state values\n  const [userPayload, setUserPayload] = useState({});\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [ipInfo, setIpInfo] = useState({});\n  const [ipDomain, setIpDomain] = useState(\"\");\n\n  useEffect(() => {\n    getIpOrDomainInfo().then((data) => {\n      setIpInfo({ ...data });\n    });\n  }, []);\n\n  const getIpInfo = (ipAddr) => {\n    setIpInfo({ ...ipInfo });\n    getIpOrDomainInfo(ipAddr).then((data) => {\n      // console.log(data);\n      setIpInfo({ ...data });\n    });\n  };\n  useEffect(() => {\n    const sawoConfig = {\n      containerID: \"sawo-container\",\n      identifierType: \"phone_number_sms\",\n      apiKey: \"d592e239-0993-4fe7-a35e-55c4b6b05bc6\",\n      onSuccess: onSuccessLogin\n    };\n    // creating instance\n    let sawo = new Sawo(sawoConfig);\n    // calling method to show form\n    sawo.showForm();\n  }, []);\n  // OnSuccess Callback method\n  const onSuccessLogin = async (payload) => {\n    setUserPayload(payload);\n    setIsLoggedIn(true);\n  };\n  //form handling using formik\n  const formik = useFormik({\n    initialValues: {\n      text: '',\n    },\n    onSubmit: values => {\n      getIpInfo(values[\"text\"])\n    },\n  });\n\n\nreturn (\n    <React.Fragment>\n      <div>\n        <section>\n          {/* Showing Successful login message */}\n          {!isLoggedIn && (\n            // <React.Fragment>\n            //   <div>\n            //     <h2>User Successfull login</h2>\n            //     <div>UserId: {userPayload.user_id}</div>\n            //     <div>Verification Token: {userPayload.verification_token}</div>\n            //   </div>\n            // </React.Fragment>\n        <div>\n        <div id=\"heroSection\">\n                <h1 id=\"heroHeader\">IP Address Tracker</h1>\n                <form id=\"formMain\" onSubmit={formik.handleSubmit}>\n                    <label>\n                    <input \n                    id=\"text\" \n                    type=\"text\" \n                    name=\"text\" \n                    placeholder=\"Search for any IP address or Domain\" \n                    onChange={formik.handleChange}\n                    value={formik.values.text}\n                    />\n                    </label>\n                    <input id=\"submitButton\" type=\"submit\" value=\"Submit\"  />\n                </form>\n                </div>\n            {// <div id=\"boxResults\">    \n            // {console.log(ipInfo)}\n            // <div class=\"resultBox\" id=\"borderRight\"><p>IP Address</p><h2>{ipInfo['ipAddr']}</h2></div>\n            // <div class=\"resultBox\" id=\"borderRight\"><p>Location</p><h2>{ipInfo['location']}</h2></div>\n            // <div class=\"resultBox\" id=\"borderRight\"><p>Timezone</p><h2>{ipInfo['timezone']}</h2></div>\n            // <div class=\"resultBox\"><p>ISP</p><h2>{ipInfo['isp']}</h2></div>\n            // </div>\n          }\n            <IPInfo ipInfo={ipInfo} />\n            <div id=\"map\">\n            {// <MapContainer style={{ height: \"600px\", width: \"100%\" }} center={ipInfo.lat,ipInfo.lng} zoom={10} scrollWheelZoom={true}>\n            // <TileLayer\n            // attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            // url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            // />\n            // <Marker position={ipInfo.lat,ipInfo.lng}>\n            // <Popup>\n            // A pretty CSS3 popup. <br /> Easily customizable.\n            // </Popup>\n            // </Marker>\n            // </MapContainer>\n          }\n\n          <DisplayMap coordinates={ipInfo}/>\n            </div>\n        </div>\n\n          )}\n\n          {/* Showing login form */}\n          {!isLoggedIn && (\n\n            <div id=\"sawo-container\" style={{width:\"500px\",height:\"300px\",margin:\"0 auto\", marginTop:\"100px\"}}>\n              {/* Sawo form will appear here */}\n              <h1>Login using Sawo</h1>\n            </div>\n          )}\n        </section>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}