{"version":3,"sources":["App.js","index.js"],"names":["L","Icon","Default","imagePath","App","useState","setUserPayload","isLoggedIn","setIsLoggedIn","useEffect","sawoConfig","containerID","identifierType","apiKey","onSuccess","onSuccessLogin","Sawo","showForm","payload","a","formik","useFormik","initialValues","text","onSubmit","values","alert","JSON","stringify","Fragment","id","handleSubmit","type","name","placeholder","onChange","handleChange","value","class","MapContainer","style","height","width","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","Popup","margin","marginTop","ReactDOM","render","document","getElementById"],"mappings":"8UAQAA,IAAEC,KAAKC,QAAQC,UAAY,IAwGZC,MAtGf,WAEE,MAAsCC,mBAAS,IAA/C,mBAAoBC,GAApB,WACA,EAAoCD,oBAAS,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACR,IAAMC,EAAa,CACjBC,YAAa,iBACbC,eAAgB,mBAChBC,OAAQ,uCACRC,UAAWC,GAGF,IAAIC,IAAKN,GAEfO,aACJ,IAEH,IAAMF,EAAc,uCAAG,WAAOG,GAAP,SAAAC,EAAA,sDACrBb,EAAeY,GACfV,GAAc,GAFO,2CAAH,sDAOdY,EAASC,YAAU,CACvBC,cAAe,CACbC,KAAM,IAERC,SAAU,SAAAC,GACRC,MAAMC,KAAKC,UAAUH,EAAQ,KAAM,OAKvC,OACE,cAAC,IAAMI,SAAP,UACE,8BACE,oCAEGtB,GAQH,gCACA,sBAAKuB,GAAG,cAAR,UACQ,oBAAIA,GAAG,aAAP,gCACA,uBAAMA,GAAG,WAAWN,SAAUJ,EAAOW,aAArC,UACI,gCACA,uBACAD,GAAG,OACHE,KAAK,OACLC,KAAK,OACLC,YAAY,sCACZC,SAAUf,EAAOgB,aACjBC,MAAOjB,EAAOK,OAAOF,SAGrB,uBAAOO,GAAG,eAAeE,KAAK,SAASK,MAAM,iBAGrD,sBAAKP,GAAG,aAAR,UACI,sBAAKQ,MAAM,YAAYR,GAAG,cAA1B,UAAwC,2CAAiB,gDACzD,sBAAKQ,MAAM,YAAYR,GAAG,cAA1B,UAAwC,yCAAe,gDACvD,sBAAKQ,MAAM,YAAYR,GAAG,cAA1B,UAAwC,yCAAe,gDACvD,sBAAKQ,MAAM,YAAX,UAAuB,oCAAU,mDAErC,qBAAKR,GAAG,MAAR,SACA,eAACS,EAAA,EAAD,CAAcC,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAAUC,OAAQ,CAAC,QAAS,KAAOC,KAAM,GAAIC,iBAAiB,EAA7G,UACA,cAACC,EAAA,EAAD,CACAC,YAAY,yEACZC,IAAI,uDAEJ,cAACC,EAAA,EAAD,CAAQC,SAAU,CAAC,QAAS,KAA5B,SACA,eAACC,EAAA,EAAD,mCACqB,uBADrB,sCAWA5C,GAEA,qBAAKuB,GAAG,iBAAiBU,MAAO,CAACE,MAAM,QAAQD,OAAO,QAAQW,OAAO,SAAUC,UAAU,SAAzF,SAEE,4DChGdC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a1e4c5a3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Sawo from \"sawo\";\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from \"leaflet\";\nimport { useFormik } from 'formik';\n// import getLoc from \"./geolocator\"\nL.Icon.Default.imagePath = \"/\";\n\nfunction App() {\n  // state values\n  const [userPayload, setUserPayload] = useState({});\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const sawoConfig = {\n      containerID: \"sawo-container\",\n      identifierType: \"phone_number_sms\",\n      apiKey: \"d592e239-0993-4fe7-a35e-55c4b6b05bc6\",\n      onSuccess: onSuccessLogin\n    };\n    // creating instance\n    let sawo = new Sawo(sawoConfig);\n    // calling method to show form\n    sawo.showForm();\n  }, []);\n  // OnSuccess Callback method\n  const onSuccessLogin = async (payload) => {\n    setUserPayload(payload);\n    setIsLoggedIn(true);\n\n  };\n\n  //form handling using formik\n  const formik = useFormik({\n    initialValues: {\n      text: '',\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <div>\n        <section>\n          {/* Showing Successful login message */}\n          {isLoggedIn && (\n            // <React.Fragment>\n            //   <div>\n            //     <h2>User Successfull login</h2>\n            //     <div>UserId: {userPayload.user_id}</div>\n            //     <div>Verification Token: {userPayload.verification_token}</div>\n            //   </div>\n            // </React.Fragment>\n        <div>\n        <div id=\"heroSection\">\n                <h1 id=\"heroHeader\">IP Address Tracker</h1>\n                <form id=\"formMain\" onSubmit={formik.handleSubmit}>\n                    <label>\n                    <input \n                    id=\"text\" \n                    type=\"text\" \n                    name=\"text\" \n                    placeholder=\"Search for any IP address or Domain\" \n                    onChange={formik.handleChange}\n                    value={formik.values.text}\n                    />\n                    </label>\n                    <input id=\"submitButton\" type=\"submit\" value=\"Submit\"  />\n                </form>\n                </div>\n            <div id=\"boxResults\">\n                <div class=\"resultBox\" id=\"borderRight\"><p>IP Address</p><h2>placeholder</h2></div>\n                <div class=\"resultBox\" id=\"borderRight\"><p>Location</p><h2>placeholder</h2></div>\n                <div class=\"resultBox\" id=\"borderRight\"><p>Timezone</p><h2>placeholder</h2></div>\n                <div class=\"resultBox\"><p>ISP</p><h2>placeholder</h2></div>\n            </div>\n            <div id=\"map\">\n            <MapContainer style={{ height: \"600px\", width: \"100%\" }} center={[51.505, -0.09]} zoom={10} scrollWheelZoom={true}>\n            <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <Marker position={[51.505, -0.09]}>\n            <Popup>\n            A pretty CSS3 popup. <br /> Easily customizable.\n            </Popup>\n            </Marker>\n            </MapContainer>\n            </div>\n        </div>\n\n          )}\n\n          {/* Showing login form */}\n          {!isLoggedIn && (\n\n            <div id=\"sawo-container\" style={{width:\"500px\",height:\"300px\",margin:\"0 auto\", marginTop:\"100px\"}}>\n              {/* Sawo form will appear here */}\n              <h1>Login using Sawo</h1>\n            </div>\n          )}\n        </section>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}